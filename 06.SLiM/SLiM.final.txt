// geno: genome fasta file, one chrom
// vcf: vcf file to the chrom
// chr: name of chr
// rep: seq of run

initialize() {
	initializeSLiMOptions(nucleotideBased=T);
	length = initializeAncestralNucleotides(geno);
	defineConstant("L", length);
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	initializeRecombinationRate(1e-8);
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(0.0));
	initializeGenomicElement(g1, 0, L-1);
}

1 early() {
	sim.addSubpop("p0", 20);
	p0.genomes.readFromVCF(vcf, m1);
	p0.setSubpopulationSize(100000);
}

2 early() {
	sim.addSubpopSplit("p1", 36347, p0);
	sim.addSubpopSplit("p2", 3935, p0);
	sim.addSubpopSplit("p3", 100000, p0);
	sim.addSubpopSplit("p4", 100000, p0);
	sim.addSubpopSplit("p5", 46898, p0);
    p0.setSubpopulationSize(0);
}

71 late() {
    sample_sizes = c(20, 46, 48, 24, 23); 
    mutations = sim.mutationsOfType(m1);

   for (j in 1:10) {
        output_file = chr + ".sim." + rep + "." + j + ".xls";
        writeFile(output_file, "Locus\tYRE\tHZ\tTH\tCH\tXJ");
        for (i in seqAlong(mutations)) {
            freqs = rep(0.0, 5);
            for (pop in sim.subpopulations) {
                sample_size = sample_sizes[pop.id-1];
                sampled_individuals = sample(pop.individuals, sample_size);
                freqs[pop.id-1] = sum(sampled_individuals.genomes.containsMutations(mutations[i])) / (2 * sample_size);
            }
            writeFile(output_file, i + "\t" + freqs[0] + "\t" + freqs[1] + "\t" + freqs[2] + "\t" + freqs[3] + "\t" + freqs[4], append=T);
        }
    }

}

